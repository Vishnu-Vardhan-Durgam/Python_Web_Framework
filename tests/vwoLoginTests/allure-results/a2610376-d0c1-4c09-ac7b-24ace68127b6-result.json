{"name": "test_vwo_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=123.0.6312.59)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6299270C2+63090]\n\t(No symbol) [0x00007FF629892D12]\n\t(No symbol) [0x00007FF62972EB1D]\n\t(No symbol) [0x00007FF62971C76D]\n\t(No symbol) [0x00007FF62971B100]\n\t(No symbol) [0x00007FF62971B8BC]\n\t(No symbol) [0x00007FF6297314AD]\n\t(No symbol) [0x00007FF6297B3D67]\n\t(No symbol) [0x00007FF629796FDA]\n\t(No symbol) [0x00007FF6297B3412]\n\t(No symbol) [0x00007FF629796D83]\n\t(No symbol) [0x00007FF6297683A8]\n\t(No symbol) [0x00007FF629769441]\n\tGetHandleVerifier [0x00007FF629D2262D+4238301]\n\tGetHandleVerifier [0x00007FF629D5F78D+4488509]\n\tGetHandleVerifier [0x00007FF629D57A6F+4456479]\n\tGetHandleVerifier [0x00007FF629A00606+953270]\n\t(No symbol) [0x00007FF62989E5DF]\n\t(No symbol) [0x00007FF6298992B4]\n\t(No symbol) [0x00007FF6298993EB]\n\t(No symbol) [0x00007FF629889C24]\n\tBaseThreadInitThunk [0x00007FFD61037344+20]\n\tRtlUserThreadStart [0x00007FFD620626B1+33]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8803d4fd5b981298ec31aba0aba0db2f\")>\n\n    @allure.epic(\"VWO Login Test\")\n    @allure.feature(\"TC#1 --> VWO App Positive Test Case\")\n    def test_vwo_login(setup):\n        driver = setup\n>       driver.get(\"# https://app.vwo.com\")\n\ntest_vwologin.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\Web_Automation2\\Python_Web_automation2\\WebFrameWork\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\..\\Web_Automation2\\Python_Web_automation2\\WebFrameWork\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001AAD1811070>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...07FF629889C24]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD61037344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD620626B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=123.0.6312.59)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6299270C2+63090]\nE       \t(No symbol) [0x00007FF629892D12]\nE       \t(No symbol) [0x00007FF62972EB1D]\nE       \t(No symbol) [0x00007FF62971C76D]\nE       \t(No symbol) [0x00007FF62971B100]\nE       \t(No symbol) [0x00007FF62971B8BC]\nE       \t(No symbol) [0x00007FF6297314AD]\nE       \t(No symbol) [0x00007FF6297B3D67]\nE       \t(No symbol) [0x00007FF629796FDA]\nE       \t(No symbol) [0x00007FF6297B3412]\nE       \t(No symbol) [0x00007FF629796D83]\nE       \t(No symbol) [0x00007FF6297683A8]\nE       \t(No symbol) [0x00007FF629769441]\nE       \tGetHandleVerifier [0x00007FF629D2262D+4238301]\nE       \tGetHandleVerifier [0x00007FF629D5F78D+4488509]\nE       \tGetHandleVerifier [0x00007FF629D57A6F+4456479]\nE       \tGetHandleVerifier [0x00007FF629A00606+953270]\nE       \t(No symbol) [0x00007FF62989E5DF]\nE       \t(No symbol) [0x00007FF6298992B4]\nE       \t(No symbol) [0x00007FF6298993EB]\nE       \t(No symbol) [0x00007FF629889C24]\nE       \tBaseThreadInitThunk [0x00007FFD61037344+20]\nE       \tRtlUserThreadStart [0x00007FFD620626B1+33]\n\n..\\..\\..\\..\\Web_Automation2\\Python_Web_automation2\\WebFrameWork\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "start": 1711984371191, "stop": 1711984371202, "uuid": "61afa6ea-8eca-4f03-bdfc-9819a57018b7", "historyId": "e0d5b51a9b376455588f26e3293391c4", "testCaseId": "e0d5b51a9b376455588f26e3293391c4", "fullName": "tests.vwoLoginTests.test_vwologin#test_vwo_login", "labels": [{"name": "epic", "value": "VWO Login Test"}, {"name": "feature", "value": "TC#1 --> VWO App Positive Test Case"}, {"name": "parentSuite", "value": "tests.vwoLoginTests"}, {"name": "suite", "value": "test_vwologin"}, {"name": "host", "value": "DESKTOP-T73FDRD"}, {"name": "thread", "value": "13812-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwoLoginTests.test_vwologin"}]}